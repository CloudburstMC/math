package org.cloudburstmc.math.imaginary;

import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;

import org.cloudburstmc.math.GenericMath;
import org.cloudburstmc.math.TrigMath;
import org.cloudburstmc.math.vector.Vector2#E#;
import org.cloudburstmc.math.vector.Vector3#E#;

import java.io.Serializable;

/**
 * Represent a complex number of the form <code>x + yi</code>. The x and y components are stored as #e#s.
 */
@ParametersAreNonnullByDefault
public abstract class Complex#E# implements Imaginary#E#, Comparable<Complex#E#>, Serializable, Cloneable {
    /**
     * An identity (0, 0) complex.
     */
    public static final Complex#E# ZERO = Complex#E#.from(0, 0);
    /**
     * An identity (1, 0) complex.
     */
    public static final Complex#E# IDENTITY = Complex#E#.from(1, 0);
   
    /**
     * Gets the x (real) component of this complex.
     *
     * @return The x (real) component
     */
    public abstract #e# getX();

    /**
     * Gets the y (imaginary) component of this complex.
     *
     * @return The y (imaginary) component
     */
    public abstract #e# getY();

    /**
     * Adds another complex to this one.
     *
     * @param c The complex to add
     * @return A new complex, which is the sum of both
     */
    @Nonnull
    public Complex#E# add(Complex#E# c) {
        return add(c.getX(), c.getY());
    }

    /**
     * Adds the #EOverload# components of another complex to this one.
     *
     * @param x The x (real) component of the complex to add
     * @param y The y (imaginary) component of the complex to add
     * @return A new complex, which is the sum of both
     */
    @Nonnull
    public Complex#E# add(#EOverload# x, #EOverload# y) {
        return add((#e#) x, (#e#) y);
    }

    /**
     * Adds the #e# components of another complex to this one.
     *
     * @param x The x (real) component of the complex to add
     * @param y The y (imaginary) component of the complex to add
     * @return A new complex, which is the sum of both
     */
    @Nonnull
    public abstract Complex#E# add(#e# x, #e# y);

    /**
     * Subtracts another complex from this one.
     *
     * @param c The complex to subtract
     * @return A new complex, which is the difference of both
     */
    @Nonnull
    public Complex#E# sub(Complex#E# c) {
        return sub(c.getX(), c.getY());
    }

    /**
     * Subtracts the #EOverload# components of another complex from this one.
     *
     * @param x The x (real) component of the complex to subtract
     * @param y The y (imaginary) component of the complex to subtract
     * @return A new complex, which is the difference of both
     */
    @Nonnull
    public Complex#E# sub(#EOverload# x, #EOverload# y) {
        return sub((#e#) x, (#e#) y);
    }

    /**
     * Subtracts the #e# components of another complex from this one.
     *
     * @param x The x (real) component of the complex to subtract
     * @param y The y (imaginary) component of the complex to subtract
     * @return A new complex, which is the difference of both
     */
    @Nonnull
    public abstract Complex#E# sub(#e# x, #e# y);

    /**
     * Multiplies the components of this complex by a #EOverload# scalar.
     *
     * @param a The multiplication scalar
     * @return A new complex, which has each component multiplied by the scalar
     */
    @Nonnull
    public Complex#E# mul(#EOverload# a) {
        return mul((#e#) a);
    }

    /**
     * Multiplies the components of this complex by a #e# scalar.
     *
     * @param a The multiplication scalar
     * @return A new complex, which has each component multiplied by the scalar
     */
    @Nonnull
    @Override
    public abstract Complex#E# mul(#e# a);

    /**
     * Multiplies another complex with this one.
     *
     * @param c The complex to multiply with
     * @return A new complex, which is the product of both
     */
    @Nonnull
    public Complex#E# mul(Complex#E# c) {
        return mul(c.getX(), c.getY());
    }

    /**
     * Multiplies the #EOverload# components of another complex with this one.
     *
     * @param x The x (real) component of the complex to multiply with
     * @param y The y (imaginary) component of the complex to multiply with
     * @return A new complex, which is the product of both
     */
    @Nonnull
    public Complex#E# mul(#EOverload# x, #EOverload# y) {
        return mul((#e#) x, (#e#) y);
    }

    /**
     * Multiplies the #e# components of another complex with this one.
     *
     * @param x The x (real) component of the complex to multiply with
     * @param y The y (imaginary) component of the complex to multiply with
     * @return A new complex, which is the product of both
     */
    @Nonnull
    public abstract Complex#E# mul(#e# x, #e# y);

    /**
     * Divides the components of this complex by a #EOverload# scalar.
     *
     * @param a The division scalar
     * @return A new complex, which has each component divided by the scalar
     */
    @Nonnull
    public Complex#E# div(#EOverload# a) {
        return div((#e#) a);
    }

    /**
     * Divides the components of this complex by a #e# scalar.
     *
     * @param a The division scalar
     * @return A new complex, which has each component divided by the scalar
     */
    @Nonnull
    @Override
    public abstract Complex#E# div(#e# a);

    /**
     * Divides this complex by another one.
     *
     * @param c The complex to divide with
     * @return The quotient of the two complexes
     */
    @Nonnull
    public Complex#E# div(Complex#E# c) {
        return div(c.getX(), c.getY());
    }

    /**
     * Divides this complex by the #EOverload# components of another one.
     *
     * @param x The x (real) component of the complex to divide with
     * @param y The y (imaginary) component of the complex to divide with
     * @return The quotient of the two complexes
     */
    @Nonnull
    public Complex#E# div(#EOverload# x, #EOverload# y) {
        return div((#e#) x, (#e#) y);
    }

    /**
     * Divides this complex by the #e# components of another one.
     *
     * @param x The x (real) component of the complex to divide with
     * @param y The y (imaginary) component of the complex to divide with
     * @return The quotient of the two complexes
     */
    @Nonnull
    public abstract Complex#E# div(#e# x, #e# y);

    /**
     * Returns the dot product of this complex with another one.
     *
     * @param c The complex to calculate the dot product with
     * @return The dot product of the two complexes
     */
    public #e# dot(Complex#E# c) {
        return dot(c.getX(), c.getY());
    }

    /**
     * Returns the dot product of this complex with the #EOverload# components of another one.
     *
     * @param x The x (real) component of the complex to calculate the dot product with
     * @param y The y (imaginary) component of the complex to calculate the dot product with
     * @return The dot product of the two complexes
     */
    public #e# dot(#EOverload# x, #EOverload# y) {
        return dot((#e#) x, (#e#) y);
    }

    /**
     * Returns the dot product of this complex with the #e# components of another one.
     *
     * @param x The x (real) component of the complex to calculate the dot product with
     * @param y The y (imaginary) component of the complex to calculate the dot product with
     * @return The dot product of the two complexes
     */
    public #e# dot(#e# x, #e# y) {
        return this.getX() * x + this.getY() * y;
    }

    /**
     * Rotates a vector by this complex.
     *
     * @param v The vector to rotate
     * @return The rotated vector
     */
    @Nonnull
    public Vector2#E# rotate(Vector2#E# v) {
        return rotate(v.getX(), v.getY());
    }

    /**
     * Rotates the #EOverload# components of a vector by this complex.
     *
     * @param x The x component of the vector
     * @param y The y component of the vector
     * @return The rotated vector
     */
    @Nonnull
    public Vector2#E# rotate(#EOverload# x, #EOverload# y) {
        return rotate((#e#) x, (#e#) y);
    }

    /**
     * Rotates the #e# components of a vector by this complex.
     *
     * @param x The x component of the vector
     * @param y The y component of the vector
     * @return The rotated vector
     */
    @Nonnull
    public Vector2#E# rotate(#e# x, #e# y) {
        final #e# length = length();
        if (Math.abs(length) < #Eeps#) {
            throw new ArithmeticException("Cannot rotate by the zero complex");
        }
        final #e# nx = this.getX() / length;
        final #e# ny = this.getY() / length;
        return Vector2#E#.from(x * nx - y * ny, y * nx + x * ny);
    }

    /**
     * Returns a unit vector pointing in the same direction as this complex on the complex plane.
     *
     * @return The vector representing the direction this complex is pointing to
     */
    @Nonnull
    public Vector2#E# getDirection() {
        return Vector2#E#.from(this.getX(), this.getY()).normalize();
    }

    /**
     * Returns the angle in radians formed by the direction vector of this complex on the complex plane.
     *
     * @return The angle in radians of the direction vector of this complex
     */
    public #e# getAngleRad() {
        return (#e#) TrigMath.atan2(this.getY(), this.getX());
    }

    /**
     * Returns the angle in degrees formed by the direction vector of this complex on the complex plane.
     *
     * @return The angle in degrees of the direction vector of this complex
     */
    public #e# getAngleDeg() {
        return (#e#) Math.toDegrees(getAngleRad());
    }

    /**
     * Returns the conjugate of this complex. <br> Conjugation of a complex <code>a</code> is an operation returning complex <code>a'</code> such that <code>a' * a = a * a' = |a|<sup>2</sup></code> where
     * <code>|a|<sup>2</sup></code> is squared length of <code>a</code>.
     *
     * @return A new complex, which is the conjugate of this one
     */
    @Nonnull
    @Override
    public abstract Complex#E# conjugate();

    /**
     * Returns the inverse of this complex. <br> Inversion of a complex <code>a</code> returns complex <code>a<sup>-1</sup> = a' / |a|<sup>2</sup></code> where <code>a'</code> is {@link #conjugate()
     * conjugation} of <code>a</code>, and <code>|a|<sup>2</sup></code> is squared length of <code>a</code>. <br> For any complexes <code>a, b, c</code>, such that <code>a * b = c</code> equations
     * <code>a<sup>-1</sup> * c = b</code> and <code>c * b<sup>-1</sup> = a</code> are true.
     *
     * @return A new complex, which is the inverse of this one
     */
    @Nonnull
    @Override
    public abstract Complex#E# invert();

    /**
     * Returns the square of the length of this complex.
     *
     * @return The square of the length
     */
    @Override
    public #e# lengthSquared() {
        return this.getX() * this.getX() + this.getY() * this.getY();
    }

    /**
     * Returns the length of this complex.
     *
     * @return The length
     */
    @Override
    public #e# length() {
        return (#e#) Math.sqrt(lengthSquared());
    }

    /**
     * Normalizes this complex.
     *
     * @return A new complex of unit length
     */
    @Nonnull
    @Override
    public abstract Complex#E# normalize();

    /**
     * Converts this complex to a quaternion by
     * using (0, 0, 1) as a rotation axis.
     *
     * @return A quaternion of this rotation around the unit z
     */
    @Nonnull
    public Quaternion#E# toQuaternion() {
        return toQuaternion(Vector3#E#.UNIT_Z);
    }

    /**
     * Converts this complex to a quaternion by
     * using the provided vector as a rotation axis.
     *
     * @param axis The rotation axis
     * @return A quaternion of this rotation around the given axis
     */
    @Nonnull
    public Quaternion#E# toQuaternion(Vector3#E# axis) {
        return toQuaternion(axis.getX(), axis.getY(), axis.getZ());
    }

    /**
     * Converts this complex to a quaternion by
     * using the provided #EOverload# components vector
     * as a rotation axis.
     *
     * @param x The x component of the axis vector
     * @param y The y component of the axis vector
     * @param z The z component of the axis vector
     * @return A quaternion of this rotation around the given axis
     */
    @Nonnull
    public Quaternion#E# toQuaternion(#EOverload# x, #EOverload# y, #EOverload# z) {
        return toQuaternion((#e#) x, (#e#) y, (#e#) z);
    }

    /**
     * Converts this complex to a quaternion by
     * using the provided #e# components vector
     * as a rotation axis.
     *
     * @param x The x component of the axis vector
     * @param y The y component of the axis vector
     * @param z The z component of the axis vector
     * @return A quaternion of this rotation around the given axis
     */
    @Nonnull
    public Quaternion#E# toQuaternion(#e# x, #e# y, #e# z) {
        return Quaternion#E#.fromAngleRadAxis(getAngleRad(), x, y, z);
    }

    @Nonnull
    @Override
    public Complexf toFloat() {
        return Complexf.from(this.getX(), this.getY());
    }

    @Nonnull
    @Override
    public Complexd toDouble() {
        return Complexd.from(this.getX(), this.getY());
    }

    @Override
    public int compareTo(Complex#E# c) {
        return (int) Math.signum(lengthSquared() - c.lengthSquared());
    }

    @Nonnull
    @Override
    public Complex#E# clone() {
        return Complex#E#.from(this);
    }

    @Nonnull
    @Override
    public String toString() {
        return "(" + this.getX() + ", " + this.getY() + ")";
    }

    /**
     * Creates a new complex from the #e# real component.
     *
     * <p>The {@link #ZERO} constant is re-used when {@code x} is 0.</p>
     *
     * @param x The x (real) component
     * @return The complex created from the #e# real component
     */
    @Nonnull
    public static Complex#E# fromReal(#e# x) {
         return Imaginary.createComplex#E#(x, 0);
    }

    /**
     * Creates a new complex from the #e# imaginary components.
     *
     * <p>The {@link #ZERO} constant is re-used when {@code y} is 0.</p>
     *
     * @param y The y (imaginary) component
     * @return The complex created from the #e# imaginary component
     */
    @Nonnull
    public static Complex#E# fromImaginary(#e# y) {
         return Imaginary.createComplex#E#(0, y);
    }

    /**
     * Creates a new complex from another.
     *
     * @param c The complex to copy
     */
    @Nonnull
    public static Complex#E# from(Complex#E# c) {
        return from(c.getX(), c.getY());
    }

    /**
     * Creates a new complex from the #EOverload# components.
     *
     * @param x The x (real) component
     * @param y The y (imaginary) component
     */
    @Nonnull
    public static Complex#E# from(#EOverload# x, #EOverload# y) {
        return from((#e#) x, (#e#) y);
    }

    /**
     * Creates a new complex from the #e# components.
     *
     * <p>The {@link #ZERO} constant is re-used when both {@code x} and {@code z} are 0.</p>
     *
     * @param x The x (real) component
     * @param y The y (imaginary) component
     * @return The complex created from the #e# components
     */
    @Nonnull
    public static Complex#E# from(#e# x, #e# y) {
         return Imaginary.createComplex#E#(x, y);
    }

    /**
     * Creates a new complex from the angle defined from the first to the second vector.
     *
     * @param from The first vector
     * @param to The second vector
     * @return The complex defined by the angle between the vectors
     */
    @Nonnull
    public static Complex#E# fromRotationTo(Vector2#E# from, Vector2#E# to) {
        return fromAngleRad(TrigMath.acos(from.dot(to) / (from.length() * to.length())));
    }

    /**
     * Creates a new complex from the angle defined from the first to the second vector.
     *
     * @param from The first vector
     * @param to The second vector
     * @return The complex defined by the angle between the vectors
     */
    @Nonnull
    public static Complex#E# fromRotationTo(Vector3#E# from, Vector3#E# to) {
        return fromAngleRad(TrigMath.acos(from.dot(to) / (from.length() * to.length())));
    }

    /**
     * Creates a new complex from the #EOverload# angle in degrees.
     *
     * @param angle The angle in degrees
     * @return The complex defined by the angle
     */
    @Nonnull
    public static Complex#E# fromAngleDeg(#EOverload# angle) {
        return fromAngleRad(Math.toRadians(angle));
    }

    /**
     * Creates a new complex from the #EOverload# angle in radians.
     *
     * @param angle The angle in radians
     * @return The complex defined by the angle
     */
    @Nonnull
    public static Complex#E# fromAngleRad(#EOverload# angle) {
        return fromAngleRad((#e#) angle);
    }

    /**
     * Creates a new complex from the #e# angle in radians.
     *
     * @param angle The angle in radians
     * @return The complex defined by the angle
     */
    @Nonnull
    public static Complex#E# fromAngleDeg(#e# angle) {
        return fromAngleRad((#e#) Math.toRadians(angle));
    }

    /**
     * Creates a new complex from the #e# angle in radians.
     *
     * @param angle The angle in radians
     * @return The complex defined by the angle
     */
    @Nonnull
    public static Complex#E# fromAngleRad(#e# angle) {
        return Complex#E#.from(TrigMath.cos(angle), TrigMath.sin(angle));
    }
}

package org.cloudburstmc.math.vector;

import org.cloudburstmc.math.GenericMath;
import org.cloudburstmc.math.TrigMath;

import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.Immutable;

import java.io.Serializable;

@Immutable
@ParametersAreNonnullByDefault
public abstract class Vector4#E# implements Vector#E#, Comparable<Vector4#E#>, Serializable, Cloneable {
    public static final Vector4#E# ZERO = Vector4#E#.from(0, 0, 0, 0);
    public static final Vector4#E# UNIT_X = Vector4#E#.from(1, 0, 0, 0);
    public static final Vector4#E# UNIT_Y = Vector4#E#.from(0, 1, 0, 0);
    public static final Vector4#E# UNIT_Z = Vector4#E#.from(0, 0, 1, 0);
    public static final Vector4#E# UNIT_W = Vector4#E#.from(0, 0, 0, 1);
    public static final Vector4#E# ONE =  Vector4#E#.from(1, 1, 1, 1);

    public abstract #e# getX();

    public abstract #e# getY();

    public abstract #e# getZ();

    public abstract #e# getW();

    public int getFloorX() {
        return GenericMath.floor(this.getX());
    }

    public int getFloorY() {
        return GenericMath.floor(this.getY());
    }

    public int getFloorZ() {
        return GenericMath.floor(this.getZ());
    }

    public int getFloorW() {
        return GenericMath.floor(this.getW());
    }

    @Nonnull
    public Vector4#E# add(Vector4#E# v) {
        return add(v.getX(), v.getY(), v.getZ(), v.getW());
    }

    @Nonnull
    public Vector4#E# add(#EOverload# x, #EOverload# y, #EOverload# z, #EOverload# w) {
        return add((#e#) x, (#e#) y, (#e#) z, (#e#) w);
    }

    @Nonnull
    public abstract Vector4#E# add(#e# x, #e# y, #e# z, #e# w);

    @Nonnull
    public Vector4#E# sub(Vector4#E# v) {
        return sub(v.getX(), v.getY(), v.getZ(), v.getW());
    }

    @Nonnull
    public Vector4#E# sub(#EOverload# x, #EOverload# y, #EOverload# z, #EOverload# w) {
        return sub((#e#) x, (#e#) y, (#e#) z, (#e#) w);
    }

    @Nonnull
    public abstract Vector4#E# sub(#e# x, #e# y, #e# z, #e# w);

    @Nonnull
    public Vector4#E# mul(#EOverload# a) {
        return mul((#e#) a);
    }

    @Nonnull
    @Override
    public Vector4#E# mul(#e# a) {
        return mul(a, a, a, a);
    }

    @Nonnull
    public Vector4#E# mul(Vector4#E# v) {
        return mul(v.getX(), v.getY(), v.getZ(), v.getW());
    }

    @Nonnull
    public Vector4#E# mul(#EOverload# x, #EOverload# y, #EOverload# z, #EOverload# w) {
        return mul((#e#) x, (#e#) y, (#e#) z, (#e#) w);
    }

    @Nonnull
    public abstract Vector4#E# mul(#e# x, #e# y, #e# z, #e# w);

    @Nonnull
    public Vector4#E# div(#EOverload# a) {
        return div((#e#) a);
    }

    @Nonnull
    @Override
    public Vector4#E# div(#e# a) {
        return div(a, a, a, a);
    }

    @Nonnull
    public Vector4#E# div(Vector4#E# v) {
        return div(v.getX(), v.getY(), v.getZ(), v.getW());
    }

    @Nonnull
    public Vector4#E# div(#EOverload# x, #EOverload# y, #EOverload# z, #EOverload# w) {
        return div((#e#) x, (#e#) y, (#e#) z, (#e#) w);
    }

    @Nonnull
    public abstract Vector4#E# div(#e# x, #e# y, #e# z, #e# w);

    public #e# dot(Vector4#E# v) {
        return dot(v.getX(), v.getY(), v.getZ(), v.getW());
    }

    public #e# dot(#EOverload# x, #EOverload# y, #EOverload# z, #EOverload# w) {
        return dot((#e#) x, (#e#) y, (#e#) z, (#e#) w);
    }

    public #e# dot(#e# x, #e# y, #e# z, #e# w) {
        return this.getX() * x + this.getY() * y + this.getZ() * z + this.getW() * w;
    }

    @Nonnull
    public Vector4#E# project(Vector4#E# v) {
        return project(v.getX(), v.getY(), v.getZ(), v.getW());
    }

    @Nonnull
    public Vector4#E# project(#EOverload# x, #EOverload# y, #EOverload# z, #EOverload# w) {
        return project((#e#) x, (#e#) y, (#e#) z, (#e#) w);
    }

    @Nonnull
    public abstract Vector4#E# project(#e# x, #e# y, #e# z, #e# w);

    @Nonnull
    public Vector4#E# pow(#EOverload# pow) {
        return pow((#e#) pow);
    }

    @Nonnull
    @Override
    public abstract Vector4#E# pow(#e# power);

    @Nonnull
    @Override
    public abstract Vector4#E# ceil();

    @Nonnull
    @Override
    public abstract Vector4#E# floor();

    @Nonnull
    @Override
    public abstract Vector4#E# round();

    @Nonnull
    @Override
    public abstract Vector4#E# abs();

    @Nonnull
    @Override
    public abstract Vector4#E# negate();

    @Nonnull
    public Vector4#E# min(Vector4#E# v) {
        return min(v.getX(), v.getY(), v.getZ(), v.getW());
    }

    @Nonnull
    public Vector4#E# min(#EOverload# x, #EOverload# y, #EOverload# z, #EOverload# w) {
        return min((#e#) x, (#e#) y, (#e#) z, (#e#) w);
    }

    @Nonnull
    public abstract Vector4#E# min(#e# x, #e# y, #e# z, #e# w);

    @Nonnull
    public Vector4#E# max(Vector4#E# v) {
        return max(v.getX(), v.getY(), v.getZ(), v.getW());
    }

    @Nonnull
    public Vector4#E# max(#EOverload# x, #EOverload# y, #EOverload# z, #EOverload# w) {
        return max((#e#) x, (#e#) y, (#e#) z, (#e#) w);
    }

    @Nonnull
    public abstract Vector4#E# max(#e# x, #e# y, #e# z, #e# w);

    public #e# distanceSquared(Vector4#E# v) {
        return distanceSquared(v.getX(), v.getY(), v.getZ(), v.getW());
    }

    public #e# distanceSquared(#EOverload# x, #EOverload# y, #EOverload# z, #EOverload# w) {
        return distanceSquared((#e#) x, (#e#) y, (#e#) z, (#e#) w);
    }

    public #e# distanceSquared(#e# x, #e# y, #e# z, #e# w) {
        final #e# dx = this.getX() - x;
        final #e# dy = this.getY() - y;
        final #e# dz = this.getZ() - z;
        final #e# dw = this.getW() - w;
        return dx * dx + dy * dy + dz * dz + dw * dw;
    }

    public #e# distance(Vector4#E# v) {
        return distance(v.getX(), v.getY(), v.getZ(), v.getW());
    }

    public #e# distance(#EOverload# x, #EOverload# y, #EOverload# z, #EOverload# w) {
        return distance((#e#) x, (#e#) y, (#e#) z, (#e#) w);
    }

    public #e# distance(#e# x, #e# y, #e# z, #e# w) {
        return (#e#) Math.sqrt(distanceSquared(x, y, z, w));
    }

    @Override
    public #e# lengthSquared() {
        return this.getX() * this.getX() + this.getY() * this.getY() + this.getZ() * this.getZ() + this.getW() * this.getW();
    }

    @Override
    public #e# length() {
        return (#e#) Math.sqrt(lengthSquared());
    }

    @Nonnull
    @Override
    public abstract Vector4#E# normalize();

    /**
     * Return the axis with the minimal value.
     *
     * @return {@link int} axis with minimal value
     */
    @Override
    public int getMinAxis() {
        #e# value = this.getX();
        int axis = 0;
        if (this.getY() < value) {
            value = this.getY();
            axis = 1;
        }
        if (this.getZ() < value) {
            value = this.getZ();
            axis = 2;
        }
        if (this.getW() < value) {
            axis = 3;
        }
        return axis;
    }

    /**
     * Return the axis with the maximum value.
     *
     * @return {@link int} axis with maximum value
     */
    @Override
    public int getMaxAxis() {
        #e# value = this.getX();
        int axis = 0;
        if (this.getY() > value) {
            value = this.getY();
            axis = 1;
        }
        if (this.getZ() > value) {
            value = this.getZ();
            axis = 2;
        }
        if (this.getW() > value) {
            axis = 3;
        }
        return axis;
    }

    @Nonnull
    public Vector2#E# toVector2() {
        return Vector2#E#.from(this);
    }

    @Nonnull
    public Vector3#E# toVector3() {
        return Vector3#E#.from(this);
    }

    @Nonnull
    public VectorN#E# toVectorN() {
        return VectorN#E#.from(this);
    }

    @Nonnull
    @Override
    public #e#[] toArray() {
        return new #e#[]{this.getX(), this.getY(), this.getZ(), this.getW()};
    }

    @Nonnull
    @Override
    public Vector4i toInt() {
        return Vector4i.from(this.getX(), this.getY(), this.getZ(), this.getW());
    }

    @Nonnull
    @Override
    public Vector4l toLong() {
        return Vector4l.from(this.getX(), this.getY(), this.getZ(), this.getW());
    }

    @Nonnull
    @Override
    public Vector4f toFloat() {
        return Vector4f.from(this.getX(), this.getY(), this.getZ(), this.getW());
    }

    @Nonnull
    @Override
    public Vector4d toDouble() {
        return Vector4d.from(this.getX(), this.getY(), this.getZ(), this.getW());
    }

    @Override
    public int compareTo(Vector4#E# v) {
        return (int) Math.signum(lengthSquared() - v.lengthSquared());
    }

    @Nonnull
    @Override
    public Vector4#E# clone() {
        return Vector4#E#.from(this);
    }

    @Nonnull
    @Override
    public String toString() {
        return "(" + this.getX() + ", " + this.getY() + ", " + this.getZ() + ", " + this.getW() + ")";
    }

    @Nonnull
    public static Vector4#E# from(#e# n) {
         return Vector4#E#.from(n, n, n, n);
    }

    @Nonnull
    public static Vector4#E# from(Vector2#E# v) {
        return from(v, 0, 0);
    }

    @Nonnull
    public static Vector4#E# from(Vector2#E# v, #EOverload# z, #EOverload# w) {
        return from(v, (#e#) z, (#e#) w);
    }

    @Nonnull
    public static Vector4#E# from(Vector2#E# v, #e# z, #e# w) {
        return from(v.getX(), v.getY(), z, w);
    }

    @Nonnull
    public static Vector4#E# from(Vector3#E# v) {
        return from(v, 0);
    }

    @Nonnull
    public static Vector4#E# from(Vector3#E# v, #EOverload# w) {
        return from(v, (#e#) w);
    }

    @Nonnull
    public static Vector4#E# from(Vector3#E# v, #e# w) {
        return from(v.getX(), v.getY(), v.getZ(), w);
    }

    @Nonnull
    public static Vector4#E# from(Vector4#E# v) {
        return from(v.getX(), v.getY(), v.getZ(), v.getW());
    }

    @Nonnull
    public static Vector4#E# from(VectorN#E# v) {
        return from(v.get(0), v.get(1), v.size() > 2 ? v.get(2) : 0, v.size() > 3 ? v.get(3) : 0);
    }

    @Nonnull
    public static Vector4#E# from(#EOverload# x, #EOverload# y, #EOverload# z, #EOverload# w) {
        return from((#e#) x, (#e#) y, (#e#) z, (#e#) w);
    }

    @Nonnull
    public static Vector4#E# from(#e# x, #e# y, #e# z, #e# w) {
         return Vectors.createVector4#E#(x, y, z, w);
    }
}
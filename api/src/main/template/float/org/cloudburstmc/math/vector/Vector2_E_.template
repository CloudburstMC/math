package org.cloudburstmc.math.vector;

import org.cloudburstmc.math.GenericMath;
import org.cloudburstmc.math.TrigMath;

import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.Immutable;

import java.io.Serializable;
import java.util.Random;

@Immutable
@ParametersAreNonnullByDefault
public abstract class Vector2#E# implements Vector#E#, Comparable<Vector2#E#>, Serializable, Cloneable {
    public static final Vector2#E# ZERO = Vector2#E#.from(0, 0);
    public static final Vector2#E# UNIT_X = Vector2#E#.from(1, 0);
    public static final Vector2#E# UNIT_Y = Vector2#E#.from(0, 1);
    public static final Vector2#E# ONE = Vector2#E#.from(1, 1);

    public abstract #e# getX();

    public abstract #e# getY();

    public int getFloorX() {
        return GenericMath.floor(this.getX());
    }

    public int getFloorY() {
        return GenericMath.floor(this.getY());
    }

    @Nonnull
    public Vector2#E# add(Vector2#E# v) {
        return add(v.getX(), v.getY());
    }

    @Nonnull
    public Vector2#E# add(#EOverload# x, #EOverload# y) {
        return add((#e#) x, (#e#) y);
    }

    @Nonnull
    public abstract Vector2#E# add(#e# x, #e# y);

    @Nonnull
    public Vector2#E# sub(Vector2#E# v) {
        return sub(v.getX(), v.getY());
    }

    @Nonnull
    public Vector2#E# sub(#EOverload# x, #EOverload# y) {
        return sub((#e#) x, (#e#) y);
    }

    @Nonnull
    public abstract Vector2#E# sub(#e# x, #e# y);

    @Nonnull
    public Vector2#E# mul(#EOverload# a) {
        return mul((#e#) a);
    }

    @Nonnull
    @Override
    public Vector2#E# mul(#e# a) {
        return mul(a, a);
    }

    @Nonnull
    public Vector2#E# mul(Vector2#E# v) {
        return mul(v.getX(), v.getY());
    }

    @Nonnull
    public Vector2#E# mul(#EOverload# x, #EOverload# y) {
        return mul((#e#) x, (#e#) y);
    }

    @Nonnull
    public abstract Vector2#E# mul(#e# x, #e# y);

    @Nonnull
    public Vector2#E# div(#EOverload# a) {
        return div((#e#) a);
    }

    @Nonnull
    @Override
    public Vector2#E# div(#e# a) {
        return div(a, a);
    }

    @Nonnull
    public Vector2#E# div(Vector2#E# v) {
        return div(v.getX(), v.getY());
    }

    @Nonnull
    public Vector2#E# div(#EOverload# x, #EOverload# y) {
        return div((#e#) x, (#e#) y);
    }

    @Nonnull
    public abstract Vector2#E# div(#e# x, #e# y);

    public #e# dot(Vector2#E# v) {
        return dot(v.getX(), v.getY());
    }

    public #e# dot(#EOverload# x, #EOverload# y) {
        return dot((#e#) x, (#e#) y);
    }

    public #e# dot(#e# x, #e# y) {
        return this.getX() * x + this.getY() * y;
    }

    @Nonnull
    public Vector2#E# project(Vector2#E# v) {
        return project(v.getX(), v.getY());
    }

    @Nonnull
    public Vector2#E# project(#EOverload# x, #EOverload# y) {
        return project((#e#) x, (#e#) y);
    }

    @Nonnull
    public abstract Vector2#E# project(#e# x, #e# y);

    @Nonnull
    public Vector2#E# pow(#EOverload# pow) {
        return pow((#e#) pow);
    }

    @Nonnull
    @Override
    public abstract Vector2#E# pow(#e# power);

    @Nonnull
    @Override
    public abstract Vector2#E# ceil();

    @Nonnull
    @Override
    public abstract Vector2#E# floor();

    @Nonnull
    @Override
    public abstract Vector2#E# round();

    @Nonnull
    @Override
    public abstract Vector2#E# abs();

    @Nonnull
    @Override
    public abstract Vector2#E# negate();

    @Nonnull
    public Vector2#E# min(Vector2#E# v) {
        return min(v.getX(), v.getY());
    }

    @Nonnull
    public Vector2#E# min(#EOverload# x, #EOverload# y) {
        return min((#e#) x, (#e#) y);
    }

    @Nonnull
    public abstract Vector2#E# min(#e# x, #e# y);

    @Nonnull
    public Vector2#E# max(Vector2#E# v) {
        return max(v.getX(), v.getY());
    }

    @Nonnull
    public Vector2#E# max(#EOverload# x, #EOverload# y) {
        return max((#e#) x, (#e#) y);
    }

    @Nonnull
    public abstract Vector2#E# max(#e# x, #e# y);

    public #e# distanceSquared(Vector2#E# v) {
        return distanceSquared(v.getX(), v.getY());
    }

    public #e# distanceSquared(#EOverload# x, #EOverload# y) {
        return distanceSquared((#e#) x, (#e#) y);
    }

    public #e# distanceSquared(#e# x, #e# y) {
        final #e# dx = this.getX() - x;
        final #e# dy = this.getY() - y;
        return dx * dx + dy * dy;
    }

    public #e# distance(Vector2#E# v) {
        return distance(v.getX(), v.getY());
    }

    public #e# distance(#EOverload# x, #EOverload# y) {
        return distance((#e#) x, (#e#) y);
    }

    public #e# distance(#e# x, #e# y) {
        return (#e#) Math.sqrt(distanceSquared(x, y));
    }

    @Nonnull
    public Vector2#E# north() {
        return north(1);
    }

    @Nonnull
    public abstract Vector2#E# north(#e# v);

    @Nonnull
    public Vector2#E# south() {
        return south(1);
    }

    @Nonnull
    public abstract Vector2#E# south(#e# v);

    @Nonnull
    public Vector2#E# east() {
        return east(1);
    }

    @Nonnull
    public abstract Vector2#E# east(#e# v);

    @Nonnull
    public Vector2#E# west() {
        return west(1);
    }

    @Nonnull
    public abstract Vector2#E# west(#e# v);

    @Override
    public #e# lengthSquared() {
        return this.getX() * this.getX() + this.getY() * this.getY();
    }

    @Override
    public #e# length() {
        return (#e#) Math.sqrt(lengthSquared());
    }

    @Nonnull
    @Override
    public abstract Vector2#E# normalize();

    /**
     * Return the axis with the minimal value.
     *
     * @return {@link int} axis with minimal value
     */
    @Override
    public int getMinAxis() {
        return this.getX() < this.getY() ? 0 : 1;
    }

    /**
     * Return the axis with the maximum value.
     *
     * @return {@link int} axis with maximum value
     */
    @Override
    public int getMaxAxis() {
        return this.getX() > this.getY() ? 0 : 1;
    }

    @Nonnull
    public Vector3#E# toVector3() {
        return toVector3(0);
    }

    @Nonnull
    public Vector3#E# toVector3(#EOverload# z) {
        return toVector3((#e#) z);
    }

    @Nonnull
    public Vector3#E# toVector3(#e# z) {
        return Vector3#E#.from(this, z);
    }

    @Nonnull
    public Vector4#E# toVector4() {
        return toVector4(0, 0);
    }

    @Nonnull
    public Vector4#E# toVector4(#EOverload# z, #EOverload# w) {
        return toVector4((#e#) z, (#e#) w);
    }

    @Nonnull
    public Vector4#E# toVector4(#e# z, #e# w) {
        return Vector4#E#.from(this, z, w);
    }

    @Nonnull
    public VectorN#E# toVectorN() {
        return VectorN#E#.from(this);
    }

    @Nonnull
    @Override
    public #e#[] toArray() {
        return new #e#[]{this.getX(), this.getY()};
    }

    @Nonnull
    @Override
    public Vector2i toInt() {
        return Vector2i.from(this.getX(), this.getY());
    }

    @Nonnull
    @Override
    public Vector2l toLong() {
        return Vector2l.from(this.getX(), this.getY());
    }

    @Nonnull
    @Override
    public Vector2f toFloat() {
        return Vector2f.from(this.getX(), this.getY());
    }

    @Nonnull
    @Override
    public Vector2d toDouble() {
        return Vector2d.from(this.getX(), this.getY());
    }

    @Override
    public int compareTo(Vector2#E# v) {
        return (int) Math.signum(lengthSquared() - v.lengthSquared());
    }

    @Nonnull
    @Override
    public Vector2#E# clone() {
        return Vector2#E#.from(this);
    }

    @Nonnull
    @Override
    public String toString() {
        return "(" + this.getX() + ", " + this.getY() + ")";
    }

    @Nonnull
    public static Vector2#E# from(#e# n) {
        return Vectors.createVector2#E#(n, n);
    }

    @Nonnull
    public static Vector2#E# from(Vector2#E# v) {
        return from(v.getX(), v.getY());
    }

    @Nonnull
    public static Vector2#E# from(Vector3#E# v) {
        return from(v.getX(), v.getY());
    }

    @Nonnull
    public static Vector2#E# from(Vector4#E# v) {
        return from(v.getX(), v.getY());
    }

    @Nonnull
    public static Vector2#E# from(VectorN#E# v) {
        return from(v.get(0), v.get(1));
    }

    @Nonnull
    public static Vector2#E# from(#EOverload# x, #EOverload# y) {
        return from((#e#) x, (#e#) y);
    }

    @Nonnull
    public static Vector2#E# from(#e# x, #e# y) {
         return Vectors.createVector2#E#(x, y);
    }

    /**
     * Gets the direction vector of a random angle using the random specified.
     *
     * @param random to use
     * @return the random direction vector
     */
    @Nonnull
    public static Vector2#E# createRandomDirection(Random random) {
        return createDirectionRad(random.next#ES#() * (#e#) TrigMath.TWO_PI);
    }

    /**
     * Gets the direction vector of a certain angle in degrees.
     *
     * @param angle in degrees
     * @return the direction vector
     */
    @Nonnull
    public static Vector2#E# createDirectionDeg(#EOverload# angle) {
        return createDirectionDeg((#e#) angle);
    }

    /**
     * Gets the direction vector of a certain angle in degrees.
     *
     * @param angle in degrees
     * @return the direction vector
     */
    @Nonnull
    public static Vector2#E# createDirectionDeg(#e# angle) {
        return createDirectionRad((#e#) Math.toRadians(angle));
    }

    /**
     * Gets the direction vector of a certain angle in radians.
     *
     * @param angle in radians
     * @return the direction vector
     */
    @Nonnull
    public static Vector2#E# createDirectionRad(#EOverload# angle) {
        return createDirectionRad((#e#) angle);
    }

    /**
     * Gets the direction vector of a certain angle in radians.
     *
     * @param angle in radians
     * @return the direction vector
     */
    @Nonnull
    public static Vector2#E# createDirectionRad(#e# angle) {
        return Vector2#E#.from(TrigMath.cos(angle), TrigMath.sin(angle));
    }
}
package org.cloudburstmc.math.vector;

import org.cloudburstmc.math.GenericMath;

import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;

import java.io.Serializable;
import java.util.Arrays;

@ParametersAreNonnullByDefault
public class VectorN#E# implements Vector#E#, Comparable<VectorN#E#>, Serializable, Cloneable {
    public static VectorN#E# ZERO_2 = new ImmutableZeroVectorN(0, 0);
    public static VectorN#E# ZERO_3 = new ImmutableZeroVectorN(0, 0, 0);
    public static VectorN#E# ZERO_4 = new ImmutableZeroVectorN(0, 0, 0, 0);
    private static final long serialVersionUID = 1;
    private final #e#[] vec;

    private VectorN#E#(#e#[] v) {
        vec = v.clone();
    }

    public int size() {
        return vec.length;
    }

    public #e# get(int comp) {
        return vec[comp];
    }

    public void set(int comp, #e# val) {
        vec[comp] = val;
    }

    public void setZero() {
        Arrays.fill(vec, 0);
    }

    @Nonnull
    public VectorN#E# resize(int size) {
        final VectorN#E# d = VectorN#E#.from(size);
        System.arraycopy(vec, 0, d.vec, 0, Math.min(size, size()));
        return d;
    }

    @Nonnull
    public VectorN#E# add(VectorN#E# v) {
        return add(v.vec);
    }

    @Nonnull
    public VectorN#E# add(#e#... v) {
        final int size = size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        final VectorN#E# d = VectorN#E#.from(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = vec[comp] + v[comp];
        }
        return d;
    }

    @Nonnull
    public VectorN#E# sub(VectorN#E# v) {
        return sub(v.vec);
    }

    @Nonnull
    public VectorN#E# sub(#e#... v) {
        final int size = size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        final VectorN#E# d = VectorN#E#.from(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = vec[comp] - v[comp];
        }
        return d;
    }

    @Nonnull
    public VectorN#E# mul(#EOverload# a) {
        return mul(#EFloorFunc#(a));
    }

    @Nonnull
    @Override
    public VectorN#E# mul(#e# a) {
        final int size = size();
        final VectorN#E# d = VectorN#E#.from(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = vec[comp] * a;
        }
        return d;
    }

    @Nonnull
    public VectorN#E# mul(VectorN#E# v) {
        return mul(v.vec);
    }

    @Nonnull
    public VectorN#E# mul(#e#... v) {
        final int size = size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        final VectorN#E# d = VectorN#E#.from(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = vec[comp] * v[comp];
        }
        return d;
    }

    @Nonnull
    public VectorN#E# div(#EOverload# a) {
        return div(#EFloorFunc#(a));
    }

    @Nonnull
    @Override
    public VectorN#E# div(#e# a) {
        final int size = size();
        final VectorN#E# d = VectorN#E#.from(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = vec[comp] / a;
        }
        return d;
    }

    @Nonnull
    public VectorN#E# div(VectorN#E# v) {
        return div(v.vec);
    }

    @Nonnull
    public VectorN#E# div(#e#... v) {
        final int size = size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        final VectorN#E# d = VectorN#E#.from(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = vec[comp] / v[comp];
        }
        return d;
    }

    public #e# dot(VectorN#E# v) {
        return dot(v.vec);
    }

    public #e# dot(#e#... v) {
        final int size = size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        #e# d = 0;
        for (int comp = 0; comp < size; comp++) {
            d += vec[comp] * v[comp];
        }
        return d;
    }

    @Nonnull
    public VectorN#E# project(VectorN#E# v) {
        return project(v.vec);
    }

    @Nonnull
    public VectorN#E# project(#e#... v) {
        final int size = size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        #e# lengthSquared = 0;
        for (int comp = 0; comp < size; comp++) {
            lengthSquared += v[comp] * v[comp];
        }
        if (lengthSquared == 0) {
            throw new ArithmeticException("Cannot project onto the zero vector");
        }
        final #EDecEqui# a = (#EDecEqui#) dot(v) / lengthSquared;
        final VectorN#E# d = VectorN#E#.from(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = #EFloorFunc#(a * v[comp]);
        }
        return d;
    }

    @Nonnull
    public VectorN#E# pow(#EOverload# pow) {
        return pow(#EFloorFunc#(pow));
    }

    @Nonnull
    @Override
    public VectorN#E# pow(#e# power) {
        final int size = size();
        final VectorN#E# d = VectorN#E#.from(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = #EFloorFunc#(Math.pow(vec[comp], power));
        }
        return d;
    }

    @Nonnull
    @Override
    public VectorN#E# abs() {
        final int size = size();
        final VectorN#E# d = VectorN#E#.from(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = Math.abs(vec[comp]);
        }
        return d;
    }

    @Nonnull
    @Override
    public VectorN#E# negate() {
        final int size = size();
        final VectorN#E# d = VectorN#E#.from(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = -vec[comp];
        }
        return d;
    }

    @Nonnull
    public VectorN#E# min(VectorN#E# v) {
        return min(v.vec);
    }

    @Nonnull
    public VectorN#E# min(#e#... v) {
        final int size = size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        final VectorN#E# d = VectorN#E#.from(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = Math.min(vec[comp], v[comp]);
        }
        return d;
    }

    @Nonnull
    public VectorN#E# max(VectorN#E# v) {
        return max(v.vec);
    }

    @Nonnull
    public VectorN#E# max(#e#... v) {
        final int size = size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        final VectorN#E# d = VectorN#E#.from(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = Math.max(vec[comp], v[comp]);
        }
        return d;
    }

    public #e# distanceSquared(VectorN#E# v) {
        return distanceSquared(v.vec);
    }

    public #e# distanceSquared(#e#... v) {
        final int size = size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        #e# d = 0;
        for (int comp = 0; comp < size; comp++) {
            final #e# delta = vec[comp] - v[comp];
            d += delta * delta;
        }
        return d;
    }

    public #EDecEqui# distance(VectorN#E# v) {
        return distance(v.vec);
    }

    public #EDecEqui# distance(#e#... v) {
        return (#EDecEqui#) Math.sqrt(distanceSquared(v));
    }

    @Override
    public #e# lengthSquared() {
        final int size = size();
        #e# l = 0;
        for (int comp = 0; comp < size; comp++) {
            l += vec[comp] * vec[comp];
        }
        return l;
    }

    @Override
    public #EDecEqui# length() {
        return (#EDecEqui#) Math.sqrt(lengthSquared());
    }

    @Override
    public int getMinAxis() {
        int axis = 0;
        #e# value = vec[axis];
        final int size = size();
        for (int comp = 1; comp < size; comp++) {
            if (vec[comp] < value) {
                value = vec[comp];
                axis = comp;
            }
        }
        return axis;
    }

    @Override
    public int getMaxAxis() {
        int axis = 0;
        #e# value = vec[axis];
        final int size = size();
        for (int comp = 1; comp < size; comp++) {
            if (vec[comp] > value) {
                value = vec[comp];
                axis = comp;
            }
        }
        return axis;
    }

    @Nonnull
    public Vector2#E# toVector2() {
        return Vector2#E#.from(this);
    }

    @Nonnull
    public Vector3#E# toVector3() {
        return Vector3#E#.from(this);
    }

    @Nonnull
    public Vector4#E# toVector4() {
        return Vector4#E#.from(this);
    }

    @Nonnull
    @Override
    public #e#[] toArray() {
        return vec.clone();
    }

    @Nonnull
    @Override
    public VectorNi toInt() {
        final int size = size();
        final int[] intVec = new int[size];
        for (int comp = 0; comp < size; comp++) {
            intVec[comp] = (int) vec[comp];
        }
        return VectorNi.from(intVec);
    }

    @Nonnull
    @Override
    public VectorNl toLong() {
        final int size = size();
        final long[] longVec = new long[size];
        for (int comp = 0; comp < size; comp++) {
            longVec[comp] = (long) vec[comp];
        }
        return VectorNl.from(longVec);
    }

    @Nonnull
    @Override
    public VectorNf toFloat() {
        final int size = size();
        final float[] floatVec = new float[size];
        for (int comp = 0; comp < size; comp++) {
            floatVec[comp] = (float) vec[comp];
        }
        return VectorNf.from(floatVec);
    }

    @Nonnull
    @Override
    public VectorNd toDouble() {
        final int size = size();
        final double[] doubleVec = new double[size];
        for (int comp = 0; comp < size; comp++) {
            doubleVec[comp] = (double) vec[comp];
        }
        return VectorNd.from(doubleVec);
    }

    @Override
    public int compareTo(VectorN#E# v) {
        return (int) (lengthSquared() - v.lengthSquared());
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof VectorN#E#)) {
            return false;
        }
        return Arrays.equals(vec, ((VectorN#E#) obj).vec);
    }

    @Override
    public int hashCode() {
        return 67 * 5 + Arrays.hashCode(vec);
    }

    @Nonnull
    @Override
    public VectorN#E# clone() {
        return VectorN#E#.from(this);
    }

    @Nonnull
    @Override
    public String toString() {
        return Arrays.toString(vec).replace('[', '(').replace(']', ')');
    }

    @ParametersAreNonnullByDefault
    private static class ImmutableZeroVectorN extends VectorN#E# {
        public ImmutableZeroVectorN(#e#... v) {
            super(v);
        }

        @Override
        public void set(int comp, #e# val) {
            throw new UnsupportedOperationException("You may not alter this vector");
        }
    }

    @Nonnull
    public static VectorN#E# from(int size) {
        return from(new #e#[size]);
    }

    @Nonnull
    public static VectorN#E# from(Vector2#E# v) {
        return from(v.getX(), v.getY());
    }

    @Nonnull
    public static VectorN#E# from(Vector3#E# v) {
        return from(v.getX(), v.getY(), v.getZ());
    }

    @Nonnull
    public static VectorN#E# from(Vector4#E# v) {
        return from(v.getX(), v.getY(), v.getZ(), v.getW());
    }

    @Nonnull
    public static VectorN#E# from(VectorN#E# v) {
        return from(v.vec);
    }

    @Nonnull
    public static VectorN#E# from(#e#... v) {
        if (v.length < 2) {
            throw new IllegalArgumentException("Minimum vector size is 2");
        }
        return new VectorN#E#(v.clone());
    }
}

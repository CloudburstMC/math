package com.nukkitx.math.test.vector;

import java.util.Random;

import org.junit.Assert;
import org.junit.Test;

import com.nukkitx.math.test.TestUtil#E#;
import com.nukkitx.math.test.#EDecEquiTest#;
import com.nukkitx.math.test.TestUtili;
import com.nukkitx.math.vector.Vector2#E#;
import com.nukkitx.math.vector.Vector3#E#;
import com.nukkitx.math.vector.Vector4#E#;
import com.nukkitx.math.vector.VectorN#E#;

public class Vector2#E#Test {
    @Test
    public void testEmptyConstructor() {
        Vector2#E# vector = Vector2#E#.ZERO;
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 0);
    }

    @Test
    public void testCopyVector2Constructor() {
        Vector2#E# vector = Vector2#E#.from(Vector2#E#.from(0, 1));
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 1);
    }

    @Test
    public void testCopyVector3Constructor() {
        Vector2#E# vector = Vector2#E#.from(Vector3#E#.from(0, 1, 2));
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 1);
    }

    @Test
    public void testCopyVector4Constructor() {
        Vector2#E# vector = Vector2#E#.from(Vector4#E#.from(0, 1, 2, 3));
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 1);
    }

    @Test
    public void testCopyVectorNConstructor() {
        Vector2#E# vector = Vector2#E#.from(VectorN#E#.from(0, 1, 2, 3, 4));
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 1);
    }

    @Test
    public void testDoubleComponentsConstructor() {
        Vector2#E# vector = Vector2#E#.from(0.5, 1.7);
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 1);
    }

    @Test
    public void test#ES#ComponentsConstructor() {
        Vector2#E# vector = Vector2#E#.from((#e#) 1, (#e#) 3);
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 3);
    }

    @Test
    public void testGetters() {
        Vector2#E# vector = Vector2#E#.from(1, 3);
        TestUtil#E#.assertEquals(vector.getX(), (#e#) 1);
        TestUtil#E#.assertEquals(vector.getY(), (#e#) 3);
    }

    @Test
    public void testVector2Addition() {
        Vector2#E# vector = Vector2#E#.from(1, 3).add(Vector2#E#.from(5, -1));
        TestUtil#E#.assertEquals(vector, (#e#) 6, (#e#) 2);
    }

    @Test
    public void testDoubleComponentsAddition() {
        Vector2#E# vector = Vector2#E#.from(1, 3).add(5.5, -1.5);
        TestUtil#E#.assertEquals(vector, (#e#) 6, (#e#) 1);
    }

    @Test
    public void test#ES#ComponentsAddition() {
        Vector2#E# vector = Vector2#E#.from(1, 3).add(5, -1);
        TestUtil#E#.assertEquals(vector, (#e#) 6, (#e#) 2);
    }

    @Test
    public void testVector2Subtraction() {
        Vector2#E# vector = Vector2#E#.from(10, 5).sub(Vector2#E#.from(13, 4));
        TestUtil#E#.assertEquals(vector, (#e#) -3, (#e#) 1);
    }

    @Test
    public void testDoubleComponentsSubtraction() {
        Vector2#E# vector = Vector2#E#.from(10, 5).sub(13, 4);
        TestUtil#E#.assertEquals(vector, (#e#) -3, (#e#) 1);
    }

    @Test
    public void test#ES#ComponentsSubtraction() {
        Vector2#E# vector = Vector2#E#.from(10, 5).sub(13f, 4.5f);
        TestUtil#E#.assertEquals(vector, (#e#) -3, (#e#) 1);
    }

    @Test
    public void testDoubleFactorMultiplication() {
        Vector2#E# vector = Vector2#E#.from(2, 3).mul(2.5);
        TestUtil#E#.assertEquals(vector, (#e#) 4, (#e#) 6);
    }

    @Test
    public void test#ES#FactorMultiplication() {
        Vector2#E# vector = Vector2#E#.from(2, 3).mul((#e#) 3);
        TestUtil#E#.assertEquals(vector, (#e#) 6, (#e#) 9);
    }

    @Test
    public void testVector2Multiplication() {
        Vector2#E# vector = Vector2#E#.from(2, 3).mul(Vector2#E#.from(5, 2));
        TestUtil#E#.assertEquals(vector, (#e#) 10, (#e#) 6);
    }

    @Test
    public void testDoubleComponentsMultiplication() {
        Vector2#E# vector = Vector2#E#.from(2, 3).mul(1.5, 2.5);
        TestUtil#E#.assertEquals(vector, (#e#) 2, (#e#) 6);
    }

    @Test
    public void test#ES#ComponentsMultiplication() {
        Vector2#E# vector = Vector2#E#.from(2, 3).mul((#e#) 5, (#e#) 2);
        TestUtil#E#.assertEquals(vector, (#e#) 10, (#e#) 6);
    }

    @Test
    public void testDoubleFactorDivision() {
        Vector2#E# vector = Vector2#E#.from(2, 5).div(2d);
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 2);
    }

    @Test
    public void test#ES#FactorDivision() {
        Vector2#E# vector = Vector2#E#.from(2, 6).div((#e#) 2);
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 3);
    }

    @Test
    public void testVector2Division() {
        Vector2#E# vector = Vector2#E#.from(2, 7).div(Vector2#E#.from(2, 3));
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 2);
    }

    @Test
    public void testDoubleComponentsDivision() {
        Vector2#E# vector = Vector2#E#.from(2, 6).div(2d, 2.5);
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 3);
    }

    @Test
    public void test#ES#ComponentsDivision() {
        Vector2#E# vector = Vector2#E#.from(2, 7).div((#e#) 2, (#e#) 3);
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 2);
    }

    @Test
    public void testVector2DotProduct() {
        #e# f = Vector2#E#.from(2, 3).dot(Vector2#E#.from(4, 5));
        TestUtil#E#.assertEquals(f, (#e#) 23);
    }

    @Test
    public void testDoubleComponentsDotProduct() {
        #e# f = Vector2#E#.from(2, 3).dot(4d, 5d);
        TestUtil#E#.assertEquals(f, (#e#) 23);
    }

    @Test
    public void test#ES#ComponentsDotProduct() {
        #e# f = Vector2#E#.from(2, 3).dot(4, 5);
        TestUtil#E#.assertEquals(f, (#e#) 23);
    }

    @Test
    public void testVector2Project() {
        Vector2#E# vector = Vector2#E#.from(20, 30).project(Vector2#E#.from(10, 10));
        TestUtil#E#.assertEquals(vector, 25, 25);
    }

    @Test
    public void testDoubleComponentsProject() {
        Vector2#E# vector = Vector2#E#.from(20, 30).project(10d, 10d);
        TestUtil#E#.assertEquals(vector, 25, 25);
    }

    @Test
    public void testFloatComponentsProject() {
        Vector2#E# vector = Vector2#E#.from(20, 30).project(10, 10);
        TestUtil#E#.assertEquals(vector, 25, 25);
    }

    @Test
    public void testRaiseTo#ES#Power() {
        Vector2#E# vector = Vector2#E#.from(2, 6).pow((#e#) 2);
        TestUtil#E#.assertEquals(vector, (#e#) 4, (#e#) 36);
    }

    @Test
    public void testRaiseToDoublePower() {
        Vector2#E# vector = Vector2#E#.from(2, 6).pow(2d);
        TestUtil#E#.assertEquals(vector, (#e#) 4, (#e#) 36);
    }

    @Test
    public void testAbsolute() {
        Vector2#E# vector1 = Vector2#E#.from(-2, -6).abs();
        TestUtil#E#.assertEquals(vector1, (#e#) 2, (#e#) 6);
        Vector2#E# vector2 = Vector2#E#.from(2, 6).abs();
        TestUtil#E#.assertEquals(vector2, (#e#) 2, (#e#) 6);
    }

    @Test
    public void testNegate() {
        Vector2#E# vector = Vector2#E#.from(2, -6).negate();
        TestUtil#E#.assertEquals(vector, (#e#) -2, (#e#) 6);
    }

    @Test
    public void testVector2Minimum() {
        Vector2#E# vector = Vector2#E#.from(2, 6).min(Vector2#E#.from(3, 4));
        TestUtil#E#.assertEquals(vector, (#e#) 2, (#e#) 4);
    }

    @Test
    public void testDoubleComponentsMinimum() {
        Vector2#E# vector = Vector2#E#.from(2, 6).min(3d, 4d);
        TestUtil#E#.assertEquals(vector, (#e#) 2, (#e#) 4);
    }

    @Test
    public void test#ES#ComponentsMinimum() {
        Vector2#E# vector = Vector2#E#.from(2, 6).min((#e#) 3, (#e#) 4);
        TestUtil#E#.assertEquals(vector, (#e#) 2, (#e#) 4);
    }

    @Test
    public void testVector2Maximum() {
        Vector2#E# vector = Vector2#E#.from(2, 6).max(Vector2#E#.from(3, 4));
        TestUtil#E#.assertEquals(vector, (#e#) 3, (#e#) 6);
    }

    @Test
    public void testDoubleComponentsMaximum() {
        Vector2#E# vector = Vector2#E#.from(2, 6).max(3d, 4d);
        TestUtil#E#.assertEquals(vector, (#e#) 3, (#e#) 6);
    }

    @Test
    public void test#ES#ComponentsMaximum() {
        Vector2#E# vector = Vector2#E#.from(2, 6).max((#e#) 3, (#e#) 4);
        TestUtil#E#.assertEquals(vector, (#e#) 3, (#e#) 6);
    }

    @Test
    public void testVector2DistanceSquared() {
        #e# f = Vector2#E#.from(2, 3).distanceSquared(Vector2#E#.from(4, 5));
        TestUtil#E#.assertEquals(f, (#e#) 8);
    }

    @Test
    public void testDoubleComponentsDistanceSquared() {
        #e# f = Vector2#E#.from(2, 3).distanceSquared(4d, 5d);
        TestUtil#E#.assertEquals(f, (#e#) 8);
    }

    @Test
    public void test#ES#ComponentsDistanceSquared() {
        #e# f = Vector2#E#.from(2, 3).distanceSquared((#e#) 4, (#e#) 5);
        TestUtil#E#.assertEquals(f, (#e#) 8);
    }

    @Test
    public void testVector2Distance() {
        #EDecEqui# f = Vector2#E#.from(4, 6).distance(Vector2#E#.from(7, 2));
        #EDecEquiTest#.assertEquals(f, (#e#) 5);
    }

    @Test
    public void testDoubleComponentsDistance() {
        #EDecEqui# f = Vector2#E#.from(4, 6).distance(7d, 2d);
        #EDecEquiTest#.assertEquals(f, (#e#) 5);
    }

    @Test
    public void test#ES#ComponentsDistance() {
        #EDecEqui# f = Vector2#E#.from(4, 6).distance((#e#) 7, (#e#) 2);
        #EDecEquiTest#.assertEquals(f, (#e#) 5);
    }

    @Test
    public void testLength() {
        #EDecEqui# f = Vector2#E#.from(3, 4).length();
        #EDecEquiTest#.assertEquals(f, (#e#) 5);
    }

    @Test
    public void testLengthSquared() {
        #e# f = Vector2#E#.from(3, 4).lengthSquared();
        TestUtil#E#.assertEquals(f, (#e#) 25);
    }

    @Test
    public void testGetMinAxis() {
        Vector2#E# vector1 = Vector2#E#.from(1, 2);
        TestUtili.assertEquals(vector1.getMinAxis(), 0);
        Vector2#E# vector2 = Vector2#E#.from(2, 1);
        TestUtili.assertEquals(vector2.getMinAxis(), 1);
    }

    @Test
    public void testGetMaxAxis() {
        Vector2#E# vector1 = Vector2#E#.from(2, 1);
        TestUtili.assertEquals(vector1.getMaxAxis(), 0);
        Vector2#E# vector2 = Vector2#E#.from(1, 2);
        TestUtili.assertEquals(vector2.getMaxAxis(), 1);
    }

    @Test
    public void testConvertToVector3DefaultZ() {
        Vector3#E# vector = Vector2#E#.from(1, 2).toVector3();
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 2, (#e#) 0);
    }

    @Test
    public void testConvertToVector3#ES#Z() {
        Vector3#E# vector = Vector2#E#.from(1, 2).toVector3((#e#) 3);
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 2, (#e#) 3);
    }

    @Test
    public void testConvertToVector3DoubleZ() {
        Vector3#E# vector = Vector2#E#.from(1, 2).toVector3(3d);
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 2, (#e#) 3);
    }

    @Test
    public void testConvertToVector4DefaultZW() {
        Vector4#E# vector = Vector2#E#.from(1, 2).toVector4();
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 2, (#e#) 0, (#e#) 0);
    }

    @Test
    public void testConvertToVector4#ES#ZW() {
        Vector4#E# vector = Vector2#E#.from(1, 2).toVector4((#e#) 3, (#e#) 4);
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 2, (#e#) 3, (#e#) 4);
    }

    @Test
    public void testConvertToVector4DoubleZW() {
        Vector4#E# vector = Vector2#E#.from(1, 2).toVector4(3d, 4d);
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 2, (#e#) 3, (#e#) 4);
    }

    @Test
    public void testConvertToVectorN() {
        VectorN#E# vector = Vector2#E#.from(1, 2).toVectorN();
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 2);
    }

    @Test
    public void testConvertToArray() {
        #e#[] array = Vector2#E#.from(1, 2).toArray();
        TestUtil#E#.assertEquals(array, (#e#) 1, (#e#) 2);
    }

    @Test
    public void testComparison() {
        int c1 = Vector2#E#.from(10, 20).compareTo(Vector2#E#.from(20, 20));
        Assert.assertTrue(c1 < 0);
        int c2 = Vector2#E#.from(10, 20).compareTo(Vector2#E#.from(10, 20));
        Assert.assertTrue(c2 == 0);
        int c3 = Vector2#E#.from(10, 20).compareTo(Vector2#E#.from(10, 10));
        Assert.assertTrue(c3 > 0);
    }

    @Test
    public void testEquals() {
        Assert.assertTrue(Vector2#E#.from(122, 43).equals(Vector2#E#.from(122, 43)));
        Assert.assertFalse(Vector2#E#.from(122, 43).equals(Vector2#E#.from(378, 95)));
    }

    @Test
    public void testCloning() {
        Vector2#E# vector = Vector2#E#.from(3, 2);
        Assert.assertEquals(vector, vector.clone());
    }
}

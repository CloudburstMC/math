package com.nukkitx.math.vector;

import com.nukkitx.math.GenericMath;
import com.nukkitx.math.TrigMath;

import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;

import java.io.Serializable;

@ParametersAreNonnullByDefault
public class Vector4#E# implements Vector#E#, Comparable<Vector4#E#>, Serializable, Cloneable {
    private static final long serialVersionUID = 1;
    public static final Vector4#E# ZERO = new Vector4#E#(0, 0, 0, 0);
    public static final Vector4#E# UNIT_X = new Vector4#E#(1, 0, 0, 0);
    public static final Vector4#E# UNIT_Y = new Vector4#E#(0, 1, 0, 0);
    public static final Vector4#E# UNIT_Z = new Vector4#E#(0, 0, 1, 0);
    public static final Vector4#E# UNIT_W = new Vector4#E#(0, 0, 0, 1);
    public static final Vector4#E# ONE = new Vector4#E#(1, 1, 1, 1);
    private final #e# x;
    private final #e# y;
    private final #e# z;
    private final #e# w;
    private transient volatile boolean hashed = false;
    private transient volatile int hashCode = 0;

    private Vector4#E#(#e# x, #e# y, #e# z, #e# w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }

    public #e# getX() {
        return x;
    }

    public #e# getY() {
        return y;
    }

    public #e# getZ() {
        return z;
    }

    public #e# getW() {
        return w;
    }

    public int getFloorX() {
        return GenericMath.floor(x);
    }

    public int getFloorY() {
        return GenericMath.floor(y);
    }

    public int getFloorZ() {
        return GenericMath.floor(z);
    }

    public int getFloorW() {
        return GenericMath.floor(w);
    }

    @Nonnull
    public Vector4#E# add(Vector4#E# v) {
        return add(v.x, v.y, v.z, v.w);
    }

    @Nonnull
    public Vector4#E# add(#EOverload# x, #EOverload# y, #EOverload# z, #EOverload# w) {
        return add((#e#) x, (#e#) y, (#e#) z, (#e#) w);
    }

    @Nonnull
    public Vector4#E# add(#e# x, #e# y, #e# z, #e# w) {
        return Vector4#E#.from(this.x + x, this.y + y, this.z + z, this.w + w);
    }

    @Nonnull
    public Vector4#E# sub(Vector4#E# v) {
        return sub(v.x, v.y, v.z, v.w);
    }

    @Nonnull
    public Vector4#E# sub(#EOverload# x, #EOverload# y, #EOverload# z, #EOverload# w) {
        return sub((#e#) x, (#e#) y, (#e#) z, (#e#) w);
    }

    @Nonnull
    public Vector4#E# sub(#e# x, #e# y, #e# z, #e# w) {
        return Vector4#E#.from(this.x - x, this.y - y, this.z - z, this.w - w);
    }

    @Nonnull
    public Vector4#E# mul(#EOverload# a) {
        return mul((#e#) a);
    }

    @Nonnull
    @Override
    public Vector4#E# mul(#e# a) {
        return mul(a, a, a, a);
    }

    @Nonnull
    public Vector4#E# mul(Vector4#E# v) {
        return mul(v.x, v.y, v.z, v.w);
    }

    @Nonnull
    public Vector4#E# mul(#EOverload# x, #EOverload# y, #EOverload# z, #EOverload# w) {
        return mul((#e#) x, (#e#) y, (#e#) z, (#e#) w);
    }

    @Nonnull
    public Vector4#E# mul(#e# x, #e# y, #e# z, #e# w) {
        return Vector4#E#.from(this.x * x, this.y * y, this.z * z, this.w * w);
    }

    @Nonnull
    public Vector4#E# div(#EOverload# a) {
        return div((#e#) a);
    }

    @Nonnull
    @Override
    public Vector4#E# div(#e# a) {
        return div(a, a, a, a);
    }

    @Nonnull
    public Vector4#E# div(Vector4#E# v) {
        return div(v.x, v.y, v.z, v.w);
    }

    @Nonnull
    public Vector4#E# div(#EOverload# x, #EOverload# y, #EOverload# z, #EOverload# w) {
        return div((#e#) x, (#e#) y, (#e#) z, (#e#) w);
    }

    @Nonnull
    public Vector4#E# div(#e# x, #e# y, #e# z, #e# w) {
        return Vector4#E#.from(this.x / x, this.y / y, this.z / z, this.w / w);
    }

    public #e# dot(Vector4#E# v) {
        return dot(v.x, v.y, v.z, v.w);
    }

    public #e# dot(#EOverload# x, #EOverload# y, #EOverload# z, #EOverload# w) {
        return dot((#e#) x, (#e#) y, (#e#) z, (#e#) w);
    }

    public #e# dot(#e# x, #e# y, #e# z, #e# w) {
        return this.x * x + this.y * y + this.z * z + this.w * w;
    }

    @Nonnull
    public Vector4#E# project(Vector4#E# v) {
        return project(v.x, v.y, v.z, v.w);
    }

    @Nonnull
    public Vector4#E# project(#EOverload# x, #EOverload# y, #EOverload# z, #EOverload# w) {
        return project((#e#) x, (#e#) y, (#e#) z, (#e#) w);
    }

    @Nonnull
    public Vector4#E# project(#e# x, #e# y, #e# z, #e# w) {
        final #e# lengthSquared = x * x + y * y + z * z + w * w;
        if (Math.abs(lengthSquared) < #Eeps#) {
            throw new ArithmeticException("Cannot project onto the zero vector");
        }
        final #e# a = dot(x, y, z, w) / lengthSquared;
        return Vector4#E#.from(a * x, a * y, a * z, a * w);
    }

    @Nonnull
    public Vector4#E# pow(#EOverload# pow) {
        return pow((#e#) pow);
    }

    @Nonnull
    @Override
    public Vector4#E# pow(#e# power) {
        return Vector4#E#.from(Math.pow(x, power), Math.pow(y, power), Math.pow(z, power), Math.pow(w, power));
    }

    @Nonnull
    @Override
    public Vector4#E# ceil() {
        return Vector4#E#.from(Math.ceil(x), Math.ceil(y), Math.ceil(z), Math.ceil(w));
    }

    @Nonnull
    @Override
    public Vector4#E# floor() {
        return Vector4#E#.from(GenericMath.floor(x), GenericMath.floor(y), GenericMath.floor(z), GenericMath.floor(w));
    }

    @Nonnull
    @Override
    public Vector4#E# round() {
        return Vector4#E#.from(Math.round(x), Math.round(y), Math.round(z), Math.round(w));
    }

    @Nonnull
    @Override
    public Vector4#E# abs() {
        return Vector4#E#.from(Math.abs(x), Math.abs(y), Math.abs(z), Math.abs(w));
    }

    @Nonnull
    @Override
    public Vector4#E# negate() {
        return Vector4#E#.from(-x, -y, -z, -w);
    }

    @Nonnull
    public Vector4#E# min(Vector4#E# v) {
        return min(v.x, v.y, v.z, v.w);
    }

    @Nonnull
    public Vector4#E# min(#EOverload# x, #EOverload# y, #EOverload# z, #EOverload# w) {
        return min((#e#) x, (#e#) y, (#e#) z, (#e#) w);
    }

    @Nonnull
    public Vector4#E# min(#e# x, #e# y, #e# z, #e# w) {
        return Vector4#E#.from(Math.min(this.x, x), Math.min(this.y, y), Math.min(this.z, z), Math.min(this.w, w));
    }

    @Nonnull
    public Vector4#E# max(Vector4#E# v) {
        return max(v.x, v.y, v.z, v.w);
    }

    @Nonnull
    public Vector4#E# max(#EOverload# x, #EOverload# y, #EOverload# z, #EOverload# w) {
        return max((#e#) x, (#e#) y, (#e#) z, (#e#) w);
    }

    @Nonnull
    public Vector4#E# max(#e# x, #e# y, #e# z, #e# w) {
        return Vector4#E#.from(Math.max(this.x, x), Math.max(this.y, y), Math.max(this.z, z), Math.max(this.w, w));
    }

    public #e# distanceSquared(Vector4#E# v) {
        return distanceSquared(v.x, v.y, v.z, v.w);
    }

    public #e# distanceSquared(#EOverload# x, #EOverload# y, #EOverload# z, #EOverload# w) {
        return distanceSquared((#e#) x, (#e#) y, (#e#) z, (#e#) w);
    }

    public #e# distanceSquared(#e# x, #e# y, #e# z, #e# w) {
        final #e# dx = this.x - x;
        final #e# dy = this.y - y;
        final #e# dz = this.z - z;
        final #e# dw = this.w - w;
        return dx * dx + dy * dy + dz * dz + dw * dw;
    }

    public #e# distance(Vector4#E# v) {
        return distance(v.x, v.y, v.z, v.w);
    }

    public #e# distance(#EOverload# x, #EOverload# y, #EOverload# z, #EOverload# w) {
        return distance((#e#) x, (#e#) y, (#e#) z, (#e#) w);
    }

    public #e# distance(#e# x, #e# y, #e# z, #e# w) {
        return (#e#) Math.sqrt(distanceSquared(x, y, z, w));
    }

    @Override
    public #e# lengthSquared() {
        return x * x + y * y + z * z + w * w;
    }

    @Override
    public #e# length() {
        return (#e#) Math.sqrt(lengthSquared());
    }

    @Nonnull
    @Override
    public Vector4#E# normalize() {
        final #e# length = length();
        if (Math.abs(length) < #Eeps#) {
            throw new ArithmeticException("Cannot normalize the zero vector");
        }
        return Vector4#E#.from(x / length, y / length, z / length, w / length);
    }

    /**
     * Return the axis with the minimal value.
     *
     * @return {@link int} axis with minimal value
     */
    @Override
    public int getMinAxis() {
        #e# value = x;
        int axis = 0;
        if (y < value) {
            value = y;
            axis = 1;
        }
        if (z < value) {
            value = z;
            axis = 2;
        }
        if (w < value) {
            axis = 3;
        }
        return axis;
    }

    /**
     * Return the axis with the maximum value.
     *
     * @return {@link int} axis with maximum value
     */
    @Override
    public int getMaxAxis() {
        #e# value = x;
        int axis = 0;
        if (y > value) {
            value = y;
            axis = 1;
        }
        if (z > value) {
            value = z;
            axis = 2;
        }
        if (w > value) {
            axis = 3;
        }
        return axis;
    }

    @Nonnull
    public Vector2#E# toVector2() {
        return Vector2#E#.from(this);
    }

    @Nonnull
    public Vector3#E# toVector3() {
        return Vector3#E#.from(this);
    }

    @Nonnull
    public VectorN#E# toVectorN() {
        return VectorN#E#.from(this);
    }

    @Nonnull
    @Override
    public #e#[] toArray() {
        return new #e#[]{x, y, z, w};
    }

    @Nonnull
    @Override
    public Vector4i toInt() {
        return Vector4i.from(x, y, z, w);
    }

    @Nonnull
    @Override
    public Vector4l toLong() {
        return Vector4l.from(x, y, z, w);
    }

    @Nonnull
    @Override
    public Vector4f toFloat() {
        return Vector4f.from(x, y, z, w);
    }

    @Nonnull
    @Override
    public Vector4d toDouble() {
        return Vector4d.from(x, y, z, w);
    }

    @Override
    public int compareTo(Vector4#E# v) {
        return (int) Math.signum(lengthSquared() - v.lengthSquared());
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Vector4#E#)) {
            return false;
        }
        final Vector4#E# vector4 = (Vector4#E#) o;
        if (#ET#.compare(vector4.w, w) != 0) {
            return false;
        }
        if (#ET#.compare(vector4.x, x) != 0) {
            return false;
        }
        if (#ET#.compare(vector4.y, y) != 0) {
            return false;
        }
        if (#ET#.compare(vector4.z, z) != 0) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        if (!hashed) {
            int result = (x != +0.0f ? #ET#.hashCode(x) : 0);
            result = 31 * result + (y != +0.0f ? #ET#.hashCode(y) : 0);
            result = 31 * result + (z != +0.0f ? #ET#.hashCode(z) : 0);
            hashCode = 31 * result + (w != +0.0f ? #ET#.hashCode(w) : 0);
            hashed = true;
        }
        return hashCode;
    }

    @Nonnull
    @Override
    public Vector4#E# clone() {
        return Vector4#E#.from(this);
    }

    @Nonnull
    @Override
    public String toString() {
        return "(" + x + ", " + y + ", " + z + ", " + w + ")";
    }

    @Nonnull
    public static Vector4#E# from(#e# n) {
         return n == 0 ? ZERO : new Vector4#E#(n, n, n, n);
    }

    @Nonnull
    public static Vector4#E# from(Vector2#E# v) {
        return from(v, 0, 0);
    }

    @Nonnull
    public static Vector4#E# from(Vector2#E# v, #EOverload# z, #EOverload# w) {
        return from(v, (#e#) z, (#e#) w);
    }

    @Nonnull
    public static Vector4#E# from(Vector2#E# v, #e# z, #e# w) {
        return from(v.getX(), v.getY(), z, w);
    }

    @Nonnull
    public static Vector4#E# from(Vector3#E# v) {
        return from(v, 0);
    }

    @Nonnull
    public static Vector4#E# from(Vector3#E# v, #EOverload# w) {
        return from(v, (#e#) w);
    }

    @Nonnull
    public static Vector4#E# from(Vector3#E# v, #e# w) {
        return from(v.getX(), v.getY(), v.getZ(), w);
    }

    @Nonnull
    public static Vector4#E# from(Vector4#E# v) {
        return from(v.x, v.y, v.z, v.w);
    }

    @Nonnull
    public static Vector4#E# from(VectorN#E# v) {
        return from(v.get(0), v.get(1), v.size() > 2 ? v.get(2) : 0, v.size() > 3 ? v.get(3) : 0);
    }

    @Nonnull
    public static Vector4#E# from(#EOverload# x, #EOverload# y, #EOverload# z, #EOverload# w) {
        return from((#e#) x, (#e#) y, (#e#) z, (#e#) w);
    }

    @Nonnull
    public static Vector4#E# from(#e# x, #e# y, #e# z, #e# w) {
         return x == 0 && y == 0 && z == 0 && w == 0 ? ZERO : new Vector4#E#(x, y, z, w);
    }
}

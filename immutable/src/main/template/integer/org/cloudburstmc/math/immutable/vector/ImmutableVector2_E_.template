package org.cloudburstmc.math.immutable.vector;

import org.cloudburstmc.math.GenericMath;
import org.cloudburstmc.math.vector.*;

import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.Immutable;

import java.io.Serializable;

@Immutable
@ParametersAreNonnullByDefault
public class ImmutableVector2#E# extends Vector2#E# {
    private static final long serialVersionUID = 1;
    private final #e# x;
    private final #e# y;
    private transient volatile boolean hashed = false;
    private transient volatile int hashCode = 0;

    ImmutableVector2#E#(#e# x, #e# y) {
        this.x = x;
        this.y = y;
    }

    public #e# getX() {
        return x;
    }

    public #e# getY() {
        return y;
    }

    @Nonnull
    public Vector2#E# add(#e# x, #e# y) {
        return Vector2#E#.from(this.x + x, this.y + y);
    }

    @Nonnull
    public Vector2#E# sub(#e# x, #e# y) {
        return Vector2#E#.from(this.x - x, this.y - y);
    }

    @Nonnull
    public Vector2#E# mul(#e# x, #e# y) {
        return Vector2#E#.from(this.x * x, this.y * y);
    }

    @Nonnull
    public Vector2#E# div(#e# x, #e# y) {
        return Vector2#E#.from(this.x / x, this.y / y);
    }

    @Nonnull
    public Vector2#E# project(#e# x, #e# y) {
        final #e# lengthSquared = x * x + y * y;
        if (lengthSquared == 0) {
            throw new ArithmeticException("Cannot project onto the zero vector");
        }
        final #EDecEqui# a = (#EDecEqui#) dot(x, y) / lengthSquared;
        return Vector2#E#.from(a * x, a * y);
    }

    @Nonnull
    @Override
    public Vector2#E# pow(#e# power) {
        return Vector2#E#.from(Math.pow(x, power), Math.pow(y, power));
    }

    @Nonnull
    @Override
    public Vector2#E# abs() {
        return Vector2#E#.from(Math.abs(x), Math.abs(y));
    }

    @Nonnull
    @Override
    public Vector2#E# negate() {
        return Vector2#E#.from(-x, -y);
    }

    @Nonnull
    public Vector2#E# min(#e# x, #e# y) {
        return Vector2#E#.from(Math.min(this.x, x), Math.min(this.y, y));
    }

    @Nonnull
    public Vector2#E# max(#e# x, #e# y) {
        return Vector2#E#.from(Math.max(this.x, x), Math.max(this.y, y));
    }

    @Nonnull
    public Vector2#E# north(#e# v) {
        return Vector2#E#.from(this.x, this.y - v);
    }

    @Nonnull
    public Vector2#E# south(#e# v) {
        return Vector2#E#.from(this.x, this.y + v);
    }

    @Nonnull
    public Vector2#E# east(#e# v) {
        return Vector2#E#.from(this.x + v, this.y);
    }

    @Nonnull
    public Vector2#E# west(#e# v) {
        return Vector2#E#.from(this.x - v, this.y);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Vector2#E#)) {
            return false;
        }
        final Vector2#E# vector2 = (Vector2#E#) o;
        if (vector2.getX() != x) {
            return false;
        }
        if (vector2.getY() != y) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        if (!hashed) {
            final int result = (x != +0.0f ? #ET#.hashCode(x) : 0);
            hashCode = 31 * result + (y != +0.0f ? #ET#.hashCode(y) : 0);
            hashed = true;
        }
        return hashCode;
    }
}

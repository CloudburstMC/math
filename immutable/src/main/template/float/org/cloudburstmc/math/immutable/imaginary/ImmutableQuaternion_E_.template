package org.cloudburstmc.math.immutable.imaginary;

import org.cloudburstmc.math.GenericMath;
import org.cloudburstmc.math.TrigMath;
import org.cloudburstmc.math.imaginary.Quaternion#E#;
import org.cloudburstmc.math.matrix.Matrix3#E#;
import org.cloudburstmc.math.vector.Vector3#E#;

import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.Nonnull;

import java.io.Serializable;

/**
 * Represent a quaternion of the form <code>xi + yj + zk + w</code>. The x, y, z and w components are stored as #e#s. This class is immutable.
 */
@ParametersAreNonnullByDefault
public class ImmutableQuaternion#E# extends Quaternion#E# {
    private static final long serialVersionUID = 1;
    private final #e# x;
    private final #e# y;
    private final #e# z;
    private final #e# w;
    private transient volatile boolean hashed = false;
    private transient volatile int hashCode = 0;

    /**
     * Constructs a new quaternion from the #e# components.
     *
     * @param x The x (imaginary) component
     * @param y The y (imaginary) component
     * @param z The z (imaginary) component
     * @param w The w (real) component
     */
    ImmutableQuaternion#E#(#e# x, #e# y, #e# z, #e# w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }

    /**
     * Gets the x (imaginary) component of this quaternion.
     *
     * @return The x (imaginary) component
     */
    public #e# getX() {
        return x;
    }

    /**
     * Gets the y (imaginary) component of this quaternion.
     *
     * @return The y (imaginary) component
     */
    public #e# getY() {
        return y;
    }

    /**
     * Gets the z (imaginary) component of this quaternion.
     *
     * @return The z (imaginary) component
     */
    public #e# getZ() {
        return z;
    }

    /**
     * Gets the w (real) component of this quaternion.
     *
     * @return The w (real) component
     */
    public #e# getW() {
        return w;
    }

    /**
     * Adds the #e# components of another quaternion to this one.
     *
     * @param x The x (imaginary) component of the quaternion to add
     * @param y The y (imaginary) component of the quaternion to add
     * @param z The z (imaginary) component of the quaternion to add
     * @param w The w (real) component of the quaternion to add
     * @return A new quaternion, which is the sum of both
     */
    @Nonnull
    public Quaternion#E# add(#e# x, #e# y, #e# z, #e# w) {
        return Quaternion#E#.from(this.x + x, this.y + y, this.z + z, this.w + w);
    }

    /**
     * Subtracts the #e# components of another quaternion from this one.
     *
     * @param x The x (imaginary) component of the quaternion to subtract
     * @param y The y (imaginary) component of the quaternion to subtract
     * @param z The z (imaginary) component of the quaternion to subtract
     * @param w The w (real) component of the quaternion to subtract
     * @return A new quaternion, which is the difference of both
     */
    @Nonnull
    public Quaternion#E# sub(#e# x, #e# y, #e# z, #e# w) {
        return Quaternion#E#.from(this.x - x, this.y - y, this.z - z, this.w - w);
    }

    /**
     * Multiplies the components of this quaternion by a #e# scalar.
     *
     * @param a The multiplication scalar
     * @return A new quaternion, which has each component multiplied by the scalar
     */
    @Nonnull
    @Override
    public Quaternion#E# mul(#e# a) {
        return Quaternion#E#.from(x * a, y * a, z * a, w * a);
    }

    /**
     * Multiplies the #e# components of another quaternion with this one.
     *
     * @param x The x (imaginary) component of the quaternion to multiply with
     * @param y The y (imaginary) component of the quaternion to multiply with
     * @param z The z (imaginary) component of the quaternion to multiply with
     * @param w The w (real) component of the quaternion to multiply with
     * @return A new quaternion, which is the product of both
     */
    @Nonnull
    public Quaternion#E# mul(#e# x, #e# y, #e# z, #e# w) {
        return Quaternion#E#.from(
                this.w * x + this.x * w + this.y * z - this.z * y,
                this.w * y + this.y * w + this.z * x - this.x * z,
                this.w * z + this.z * w + this.x * y - this.y * x,
                this.w * w - this.x * x - this.y * y - this.z * z);
    }

    /**
     * Divides the components of this quaternion by a #e# scalar.
     *
     * @param a The division scalar
     * @return A new quaternion, which has each component divided by the scalar
     */
    @Nonnull
    @Override
    public Quaternion#E# div(#e# a) {
        return Quaternion#E#.from(x / a, y / a, z / a, w / a);
    }

    /**
     * Divides this quaternions by the #e# components of another one.
     *
     * @param x The x (imaginary) component of the quaternion to divide with
     * @param y The y (imaginary) component of the quaternion to divide with
     * @param z The z (imaginary) component of the quaternion to divide with
     * @param w The w (real) component of the quaternion to divide with
     * @return The quotient of the two quaternions
     */
    @Nonnull
    public Quaternion#E# div(#e# x, #e# y, #e# z, #e# w) {
        final #e# d = x * x + y * y + z * z + w * w;
        return Quaternion#E#.from(
                (this.x * w - this.w * x - this.z * y + this.y * z) / d,
                (this.y * w + this.z * x - this.w * y - this.x * z) / d,
                (this.z * w - this.y * x + this.x * y - this.w * z) / d,
                (this.w * w + this.x * x + this.y * y + this.z * z) / d);
    }

    /**
     * Conjugates the quaternion. <br> Conjugation of a quaternion <code>a</code> is an operation returning quaternion <code>a'</code> such that <code>a' * a = a * a' = |a|<sup>2</sup></code> where
     * <code>|a|<sup>2<sup/></code> is squared length of <code>a</code>.
     *
     * @return the conjugated quaternion
     */
    @Nonnull
    @Override
    public Quaternion#E# conjugate() {
        return Quaternion#E#.from(-x, -y, -z, w);
    }

    /**
     * Inverts the quaternion. <br> Inversion of a quaternion <code>a</code> returns quaternion <code>a<sup>-1</sup> = a' / |a|<sup>2</sup></code> where <code>a'</code> is {@link #conjugate()
     * conjugation} of <code>a</code>, and <code>|a|<sup>2</sup></code> is squared length of <code>a</code>. <br> For any quaternions <code>a, b, c</code>, such that <code>a * b = c</code> equations
     * <code>a<sup>-1</sup> * c = b</code> and <code>c * b<sup>-1</sup> = a</code> are true.
     *
     * @return the inverted quaternion
     */
    @Nonnull
    @Override
    public Quaternion#E# invert() {
        final #e# lengthSquared = lengthSquared();
        if (Math.abs(lengthSquared) < #Eeps#) {
            throw new ArithmeticException("Cannot invert a quaternion of length zero");
        }
        return conjugate().div(lengthSquared);
    }

    /**
     * Normalizes this quaternion.
     *
     * @return A new quaternion of unit length
     */
    @Nonnull
    @Override
    public Quaternion#E# normalize() {
        final #e# length = length();
        if (Math.abs(length) < #Eeps#) {
            throw new ArithmeticException("Cannot normalize the zero quaternion");
        }
        return Quaternion#E#.from(x / length, y / length, z / length, w / length);
    }

   @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Quaternion#E#)) {
            return false;
        }
        final Quaternion#E# quaternion = (Quaternion#E#) o;
        if (#ET#.compare(quaternion.getW(), w) != 0) {
            return false;
        }
        if (#ET#.compare(quaternion.getX(), x) != 0) {
            return false;
        }
        if (#ET#.compare(quaternion.getY(), y) != 0) {
            return false;
        }
        if (#ET#.compare(quaternion.getZ(), z) != 0) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        if (!hashed) {
            int result = (x != +0.0f ? #ET#.hashCode(x) : 0);
            result = 31 * result + (y != +0.0f ? #ET#.hashCode(y) : 0);
            result = 31 * result + (z != +0.0f ? #ET#.hashCode(z) : 0);
            hashCode = 31 * result + (w != +0.0f ? #ET#.hashCode(w) : 0);
            hashed = true;
        }
        return hashCode;
    }
}
